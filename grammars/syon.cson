name: "SyON"
scopeName: "source.sy"
fileTypes: ["sy"]
patterns: [include: "#blockInnards"]

repository:
	main:
		patterns: [
			{include: "#signature"}
			{include: "#comment"}
			{include: "#regexp"}
			{include: "#fieldQuotedEarly"}
			{include: "#heredoc"}
			{include: "#string"}
			{include: "#stringJunk"}
			{include: "#block"}
			{include: "#field"}
			{include: "#array"}
			{include: "#byteArray"}
			{include: "#brackets"}
			{include: "#boolean"}
			{include: "#null"}
			{include: "#date"}
			{include: "#number"}
			{include: "#comma"}
			{include: "#operator"}
		]
	
	# [Array]
	array:
		name: "meta.array.sy"
		begin: "\\["
		end:   "\\]"
		beginCaptures: 0: name: "punctuation.definition.array.begin.bracket.square.sy"
		endCaptures:   0: name: "punctuation.definition.array.end.bracket.square.sy"
		patterns: [
			{include: "#main"}
			
			match: "(?:[^,\\[\\]{}<>\"'`\\s:]|:(?=\\S))+"
			name: "string.unquoted.sy"
		]
	
	# { Block }
	block:
		patterns: [{
			# Tagged block {
			name: "meta.block.tagged.sy"
			begin: "((?:[^{}\\[\\]:\\s,]|[:#](?=\\S))(?:[^:{}]|:(?=\\S)|\\\\[{:])*?)({)"
			end:   "}"
			beginCaptures:
				1: name: "entity.name.block.tag.label.sy"
				2: name: "punctuation.section.scope.block.begin.bracket.curly.sy"
			endCaptures:
				0: name: "punctuation.section.scope.block.end.bracket.curly.sy"
			patterns: [include: "#blockInnards"]
		},{
			name:  "meta.block.sy"
			begin: "{"
			end:   "}"
			beginCaptures: 0: name: "punctuation.section.scope.block.begin.bracket.curly.sy"
			endCaptures:   0: name: "punctuation.section.scope.block.end.bracket.curly.sy"
			patterns: [include: "#blockInnards"]
		}]
	
	# Stuff matched directly inside of a block
	blockInnards:
		patterns: [
			{include: "#fieldQuotedEarly"}
			{include: "#main"}
			
			# Assumed to be a multiline field name
			match: "((?:[^{}\\[\\]:\\s,]|[:#](?=\\S))(?:[^:{}]|:(?=\\S)|\\\\[{:])*?)"
			captures:
				1: name: "entity.name.tag.property.sy"
		]
	
	# Brackets (expressions)
	brackets:
		name:  "meta.expression.sy"
		begin: "\\("
		end:   "\\)"
		beginCaptures: 0: name: "punctuation.section.scope.block.begin.bracket.round.sy"
		endCaptures:   0: name: "punctuation.section.scope.block.end.bracket.round.sy"
		patterns: [
			{include: "#operator"}
			{include: "#main"}
		]
	
	# Boolean keywords
	boolean:
		patterns: [{
			# True
			name: "constant.language.boolean.true.sy"
			match: """(?x)
				(?:\\G|^|(?<=[\\s\\[{,]))
				(?:true|yes|on|TRUE|YES|ON)
				(?=$|[\\s\\]},])
			"""
		},{
			# False
			name: "constant.language.boolean.false.sy"
			match: """(?x)
				(?:\\G|^|(?<=[\\s\\[{,]))
				(?:false|no|off|TRUE|YES|ON)
				(?=$|[\\s\\]},])
			"""
		}]
	
	# Arbitrary binary data
	byteArray:
		patterns: [{
			# Base64-encoded: <base64: YWJjCg>
			name: "meta.byte-array.base64.sy"
			begin: "(<)(base64)(:)"
			end:   "(>)\\s*([^:,}\\]]+)"
			beginCaptures:
				1: name: "punctuation.section.byte-array.begin.bracket.angle.sy"
				2: name: "storage.modifier.encoding.base64.sy"
				3: name: "punctuation.separator.key-value.sy"
			endCaptures:
				1: name: "punctuation.section.byte-array.end.bracket.angle.sy"
				2: name: "invalid.illegal.characters.sy"
			patterns: [{
				# Data
				name: "constant.character.encoded.base64.sy"
				match: "[A-Za-z0-9+/=]+"
			},{
				# Embedded comments
				include: "#comment"
			},{
				# Unexpected junk
				name: "invalid.illegal.character.sy"
				match: "[^\\s>]+"
			}]
		},{
			# Base85 (Ascii85): <~ â€¦ ~>
			name: "meta.byte-array.base85.sy"
			begin: "<~"
			end:   "~>"
			beginCaptures: 0: name: "punctuation.section.byte-array.begin.bracket.angle.sy"
			endCaptures:   0: name: "punctuation.section.byte-array.end.bracket.angle.sy"
			patterns: [
				{match: "[!-uz]+",     name: "constant.character.encoded.base85.sy"}
				{match: "[^!-uz\\s~]", name: "invalid.illegal.character.sy"}
			]
		},{
			# Hexadecimal: <37 A2 E7 7E>
			name:  "meta.byte-array.sy"
			begin: "<"
			end:   "(>)\\s*([^:,}\\]]+)"
			beginCaptures:
				0: name: "punctuation.section.byte-array.begin.bracket.angle.sy"
			endCaptures:
				1: name: "punctuation.section.byte-array.end.bracket.angle.sy"
				2: name: "invalid.illegal.characters.sy"
			patterns: [{
				# Byte
				name:  "constant.numeric.integer.int.hexadecimal.hex.sy"
				match: "[A-Fa-f0-9]+"
			},{
				# Embedded comments
				include: "#comment"
			},{
				# Unexpected junk
				name: "invalid.illegal.character.sy"
				match: "[^\\s>]+"
			}]
		}]
	
	# Comma
	comma:
		name: "punctuation.separator.delimiter.comma.sy"
		match: ","
	
	# Comments
	comment:
		patterns: [{
			# ### Block comment ###
			name:  "comment.block.sy"
			begin: "(?:\\G|^|(?<=\\s|\\xC2\\xAD|\\xAD))(\#{3,})(?=\\s|$)"
			end:   "\\1"
			beginCaptures: 1: name: "punctuation.definition.comment.begin.sy"
			endCaptures:   0: name: "punctuation.definition.comment.end.sy"
		},{
			# Single-line comment
			name:  "comment.line.number-sign.sy"
			begin: "(?:\\G|^|(?<=\\s|\\xC2\\xAD|\\xAD))#(?=\\s|$)"
			end:   "$"
			beginCaptures:
				0: name: "punctuation.definition.comment.sy"
		}]

	# Date or datetime
	date:
		name: "constant.other.date.sy"
		match: """(?x)
			# Date
			[0-9]{4} - # Year
			[0-9]{2} - # Month
			[0-9]{2}   # Day
			
			# Time
			(?:
				(?:T|\\s+)
				[0-9]{1,2} :     # Hours
				[0-9]{1,2} :     # Minutes
				[0-9]{1,2}       # Seconds
				(?:\\.[0-9]+)?   # Milliseconds
				(\\+[0-9]{4}|Z)? # Timezone
			)?
			
			# Followed by delimiter, EOL, or comment
			(?= \\s* (?:$|[,\\]}])
			|   \\s+ \\#(?:$|\\s)
			)
		"""

	# Escaped character
	escape:
		patterns: [{
			# Newline hack
			name:  "constant.character.escape.newline.sy"
			begin: "\\\\$\\s*"
			end:   "^"
			beginCaptures:
				0: name: "punctuation.backslash.definition.escape.sy"
		},{
			# Hexadecimal escape: \x1B
			name: "constant.character.escape.unicode.sy"
			match: "(\\\\)x[A-Fa-f0-9]{2}"
			captures:
				1: name: "punctuation.backslash.definition.escape.sy"
		},{
			# Unicode escape: \u0032
			name:  "constant.character.escape.unicode.sy"
			match: "(\\\\)u[A-Fa-f0-9]{4}"
			captures:
				1: name: "punctuation.backslash.definition.escape.sy"
		},{
			# Unicode escape: \u{1B240}
			name: "constant.character.escape.unicode.sy"
			match: "(\\\\)u({)[A-Fa-f0-9]+(})"
			captures:
				1: name: "punctuation.backslash.definition.escape.sy"
				2: name: "punctuation.definition.unicode-escape.begin.bracket.curly.sy"
				3: name: "punctuation.definition.unicode-escape.end.bracket.curly.sy"
		},{
			# Invalid unicode escape: \u{nope}, \u{}
			name: "invalid.illegal.unicode-escape.sy"
			match: "\\\\u{[^}\"]*}"
		},{
			# Invalid unicode escape: \uNOPE
			name: "invalid.illegal.unicode-escape.sy"
			match: "\\\\u(?![A-Fa-f0-9]{4})[^\"]*"
		},{
			# Anything else
			name: "constant.character.escape.sy"
			match: "(\\\\)."
			captures:
				0: name: "punctuation.backslash.definition.escape.sy"
		}]

	# Only one escape possible in a verbatim string: ``
	escapeVerbatim:
		name: "constant.character.escape.backtick.sy"
		match: "``"

	# Bunch of numbers, possibly with operators
	expression:
		name: "meta.expression.sy"
		match: """(?x)
			\\G
			(
				(?:\\s*\\()*
				\\s*
				~? [-+]? ~?
				\\d
				[-+*/%~^&|\\(\\)eE\\s.oOxXbB\\d]*
			)
			(?=
				\\s*
				(?: $
				|   ,
				| \\]
				| \\}
				| (?<=\\s)\\#(?=\\s|$)
				)
			)
		"""
		captures: 1: patterns: [
			{include: "#brackets"}
			{include: "#number"}
			{include: "#operator"}
		]

	# Named property
	field:
		name: "meta.field.sy"
		begin: """(?x)
			(?:
				# Quoted property name
				(?<=[:{\\[]) \\s*
				(?: ("(?:[^"\\\\]|\\\\.)*")
				|   ('(?:[^'\\\\]|\\\\.)*')
				|   (`(?:[^`]|``)*+`(?!`))
				) \\s* (:)
				
				|
				
				# Unquoted property name
				([^{}\\[\\]<>\\s][^,]*?)
				(?<!\\\\) (:)
				
				|
				
				# Presumably one following a multiline string
				(?<=["'`]) \\s* (:)
			)
			(?=\\s|$)
			\\s*
		"""
		end: "(?=\\s*})|^(?!\\G)"
		beginCaptures:
			1: name: "entity.name.tag.property.quoted.double.sy",   patterns: [include: "#escape"]
			2: name: "entity.name.tag.property.quoted.single.sy",   patterns: [include: "#escape"]
			3: name: "entity.name.tag.property.quoted.backtick.sy", patterns: [include: "#escapeVerbatim"]
			4: name: "punctuation.separator.key-value.sy"
			5: name: "entity.name.tag.property.sy",                 patterns: [include: "#escape"]
			6: name: "punctuation.separator.key-value.sy"
			7: name: "punctuation.separator.key-value.sy"
		patterns: [include: "#fieldInnards"]

	# Quoted field, hack for preceding #string rule
	fieldQuotedEarly:
		name: "meta.field.sy"
		begin: """(?x) (?:\\G|^) \\s*
			(?: ("(?:[^"\\\\]|\\\\.)*")
			|   ('(?:[^'\\\\]|\\\\.)*')
			|   (`(?:[^`]|``)*+`(?!`))
			) \\s* (:)
			(?=\\s|$)
			\\s*
		"""
		end: "(?=\\s*})|^(?!\\G)"
		beginCaptures:
			1: name: "entity.name.tag.property.quoted.double.sy",   patterns: [include: "#escape"]
			2: name: "entity.name.tag.property.quoted.single.sy",   patterns: [include: "#escape"]
			3: name: "entity.name.tag.property.quoted.backtick.sy", patterns: [include: "#escapeVerbatim"]
			4: name: "punctuation.separator.key-value.sy"
		patterns: [include: "#fieldInnards"]
	
	fieldInnards:
		patterns: [
			{include: "#date"}
			{include: "#expression"}
			{include: "#main"}
			
			# Unquoted string
			name: "string.unquoted.sy"
			match: """(?x) \\G
				(?! ~?[-+]?[0-9]
				|  (?<=\\s)\\#(?=\\s|$)
				)
				[^\\s{}\\[\\]<:"'`]
				
				(?: [^\\#,}\\]:]
				|   (?<=\\S) [\\#:]
				|   [:\\#] (?=\\S)
				)*
				(?!
					\\s*
					(?:[\\{:])
				)
			"""
			captures:
				0: patterns: [include: "#url"]
		]

	# Multi-line string literals
	heredoc:
		patterns: [
			{include: "#heredocDouble"}
			{include: "#heredocSingle"}
			{include: "#heredocVerbatim"}
		]
	
	# """ Double-quoted heredoc """
	heredocDouble:
		patterns: [{
			# Hinted
			name:  "string.quoted.double.heredoc.hinted.${1:/scopify}.sy"
			begin: '([-\\w]+)[ \\t]+("{3,})'
			end:   '\\2'
			beginCaptures:
				1: name: "storage.modifier.type.parse-hint.sy"
				2: name: "punctuation.definition.string.begin.sy"
			endCaptures:
				0: name: "punctuation.definition.string.end.sy"
			contentName: "embedded.${1:/scopify}"
		},{
			# Unhinted
			name: "string.quoted.double.heredoc.sy"
			begin: '("{3,})'
			end:   '\\1'
			beginCaptures: 0: name: "punctuation.definition.string.begin.sy"
			endCaptures:   0: name: "punctuation.definition.string.end.sy"
			patterns: [include: "#stringInnards"]
		}]

	# ''' Single-quoted heredoc '''
	heredocSingle:
		patterns: [{
			# Hinted
			name:  "string.quoted.single.heredoc.hinted.${1:/scopify}.sy"
			begin: "([-\\w]+)[ \\t]+('{3,})"
			end:   "\\2"
			beginCaptures:
				1: name: "storage.modifier.type.parse-hint.sy"
				2: name: "punctuation.definition.string.begin.sy"
			endCaptures:
				0: name: "punctuation.definition.string.end.sy"
			contentName: "embedded.${1:/scopify}"
		},{
			# Unhinted
			name: "string.quoted.single.heredoc.sy"
			begin: "('{3,})"
			end:   "\\1"
			beginCaptures: 0: name: "punctuation.definition.string.begin.sy"
			endCaptures:   0: name: "punctuation.definition.string.end.sy"
			patterns: [include: "#stringInnards"]
		}]

	# ``` Verbatim heredoc ```
	heredocVerbatim:
		patterns: [{
			# Hinted
			name:  "string.quoted.verbatim.backtick.heredoc.hinted.${1:/scopify}.sy"
			begin: "([-\\w]+)[ \\t]+(`{3,})"
			end:   "\\2"
			beginCaptures:
				1: name: "storage.modifier.type.parse-hint.sy"
				2: name: "punctuation.definition.string.begin.sy"
			endCaptures:
				0: name: "punctuation.definition.string.end.sy"
			contentName: "embedded.${1:/scopify}"
		},{
			# Unhinted
			name: "string.quoted.verbatim.backtick.heredoc.sy"
			begin: "(`{3,})"
			end:   "\\1"
			beginCaptures: 0: name: "punctuation.definition.string.begin.sy"
			endCaptures:   0: name: "punctuation.definition.string.end.sy"
		}]

	injection:
		begin: "\\A((?:\\xC2\\xAD|\\xAD){2,})"
		end:   "(?=A)B"
		beginCaptures:
			1: patterns: [include: "#signature"]
		patterns: [include: "#blockInnards"]

	# Null keyword
	null:
		name: "constant.language.null.sy"
		match: """(?x)
			(?:\\G|^|(?<=[\\s\\[{,]))
			(?:null|NULL)
			(?=$|[\\s\\]},])
		"""

	# Numeric literals
	number:
		match: """(?x)
			(?:^|(?<=[\\s\\[\\({,~])|\\G)
			(?: ([-+]?0[xX][A-Fa-f0-9_]+) # Hexadecimal
			|   ([-+]?0[oO][0-7_]+)       # Octal
			|   ([-+]?0[bB][0-1_]+)       # Binary
			|   ([-+]?[0-9_]+\\.(?:[0-9_]*[eE][+-]?[0-9_]+|[0-9_]+)) # Float
			|   ([-+]?[0-9_]+(?:[eE][+-]?[0-9_]+)?) # Integer
			)
			\\s*
			(?= $
			|   [-+*/%^&|\\)<>\\s\\]},]
			|   (?<=\\s)\\#(?=\\s|$)
			)
		"""
		captures:
			1: name: "constant.numeric.integer.int.hexadecimal.hex.sy"
			2: name: "constant.numeric.integer.int.octal.oct.sy"
			3: name: "constant.numeric.integer.int.binary.bin.sy"
			4: name: "constant.numeric.float.decimal.dec.sy"
			5: name: "constant.numeric.integer.int.decimal.dec.sy"

	# Expression operators
	operator:
		patterns: [{
			# Arithmetic
			name: "keyword.operator.arithmetic.sy"
			match: "\\*\\*|[-+*/%]"
		},{
			# Bitwise
			name: "keyword.operator.bitwise.sy"
			match: "(<<|>>|>>>|[~&|^])"
		}]

	# Regular expressions
	regexp:
		patterns: [{
			# Multiline regexp
			name:  "string.regexp.multiline.sy"
			begin: "(?:([-\\w]+)[ \\t]+)?(/{3,})"
			end:   "(\\2)([A-Za-z]*)"
			patterns: [include: "source.regexp#main"]
			beginCaptures:
				1: name: "storage.modifier.type.parse-hint.sy"
				2: patterns: [
					{match: "(?:\\G|^)/{3}$", name: "punctuation.definition.string.begin.triple-slash.sy"}
					{match: ".+",             name: "punctuation.definition.string.begin.sy"}
				]
			endCaptures:
				1: patterns: [
					{match: "(?:\\G|^)/{3}$", name: "punctuation.definition.string.end.triple-slash.sy"}
					{match: ".+",             name: "punctuation.definition.string.end.sy"}
				]
				2: patterns: [include: "source.regexp#scopedModifiers"]
		},{
			# Single-line regexp
			name: "string.regexp.sy"
			begin: "(?:([-\\w]+)[ \\t]+)?(/)"
			end:   "(/)([A-Za-z]*)"
			patterns: [include: "source.regexp#main"]
			beginCaptures:
				1: name: "storage.modifier.type.parse-hint.sy"
				2: name: "punctuation.definition.string.begin.sy"
			endCaptures:
				1: name: "punctuation.definition.string.end.sy"
				2: patterns: [include: "source.regexp#scopedModifiers"]
		}]

	# Start-of-file marker (magic number/signature). Used to identify SyON in the absence of
	# a known file extension, which is otherwise required to distinguish SyON from a similar
	# but incompatible format (like YAML). Synapse inserts this signature automatically when
	# saving a SyON file; the number of soft-hyphens identifies the version of the format if
	# future changes make backwards compatibility an issue (though it's unlikely to happen).
	#	
	# Signatures are allowed at the beginning of any line (not just the start-of-file); this
	# allows xopts(1) to handle cat(1) output when passed multiple `.sy` files. Soft hyphens
	# found anywhere else are treated normally (as a syntactically-insignificant character).
	signature:
		name: "punctuation.whitespace.shy-hyphens.signature.sy"
		match: "^(?:\\xC2\\xAD|\\xAD){2,}"

	# Quoted string literals
	string:
		patterns: [
			{include: "#stringDouble"}
			{include: "#stringSingle"}
			{include: "#stringVerbatim"}
		]

	# "Double-quoted string"
	stringDouble:
		patterns: [{
			# Hinted
			name:  "string.quoted.double.hinted.${1:/scopify}.sy"
			begin: '([-\\w]+)[ \\t]+(")'
			end:   '"'
			beginCaptures:
				1: name: "storage.modifier.type.parse-hint.sy"
				2: name: "punctuation.definition.string.begin.sy"
			endCaptures:
				0: name: "punctuation.definition.string.end.sy"
			contentName: "embedded.${1:/scopify}"
		},{
			# Unhinted
			name:  "string.quoted.double.sy"
			begin: '"'
			end:   '"'
			beginCaptures: 0: name: "punctuation.definition.string.begin.sy"
			endCaptures:   0: name: "punctuation.definition.string.end.sy"
			patterns: [include: "#stringInnards"]
		}]

	# 'Single-quoted string'
	stringSingle:
		patterns: [{
			# Hinted
			name:  "string.quoted.single.hinted.${1:/scopify}.sy"
			begin: "([-\\w]+)[ \\t]+(')"
			end:   "'"
			beginCaptures:
				1: name: "storage.modifier.type.parse-hint.sy"
				2: name: "punctuation.definition.string.begin.sy"
			endCaptures:
				0: name: "punctuation.definition.string.end.sy"
			contentName: "embedded.${1:/scopify}"
		},{
			# Unhinted
			name: "string.quoted.single.sy"
			begin: "'"
			end:   "'"
			beginCaptures: 0: name: "punctuation.definition.string.begin.sy"
			endCaptures:   0: name: "punctuation.definition.string.end.sy"
			patterns: [include: "#stringInnards"]
		}]

	# `Verbatim string`
	stringVerbatim:
		patterns: [{
			# Hinted
			name:  "string.quoted.verbatim.backtick.hinted.${1:/scopify}.sy"
			begin: "([-\\w]+)[ \\t]+(`)"
			end:   "`"
			beginCaptures:
				1: name: "storage.modifier.type.parse-hint.sy"
				2: name: "punctuation.definition.string.begin.sy"
			endCaptures:
				0: name: "punctuation.definition.string.end.sy"
			contentName: "embedded.${1:/scopify}"
		},{
			# Unhinted
			name: "string.quoted.verbatim.backtick.sy"
			begin: "`"
			end:   "`(?!`)"
			beginCaptures: 0: name: "punctuation.definition.string.begin.sy"
			endCaptures:   0: name: "punctuation.definition.string.end.sy"
			patterns: [include: "#escapeVerbatim"]
		}]

	# Unexpected crap found after a closed quote
	stringJunk:
		name: "invalid.illegal.syntax.sy"
		begin: "(?<=[\"'`])(?!\\s*$)(?=\\s*[^:,}\\]])"
		end: "(?=[:,}\\]])"

	stringInnards:
		patterns: [
			{include: "#url"}
			{include: "#escape"}
		]


	# Underlined URLs. Not a datatype.
	url:
		patterns: [{
			# https://etc, git://github.com/
			name: "constant.other.reference.link.underline.sy"
			match: """(?x) \\b
				# Protocol
				( https?
				| s?ftp
				| ftps
				| file
				| wss?
				| smb
				| git (?:\\+https?)
				| ssh
				| rsync
				| afp
				| nfs
				| (?:x-)?man(?:-page)?
				| gopher
				| txmt
				| issue
				| atom
				) ://
				
				# Path specifier
				(?:
					(?! \\#\\w*\\#)
					(?: [-:\\@\\w.,~%+_/?=&\\#;|!])
				)+
				
				# Don't include trailing punctuation
				(?<![-.,?:\\#;])
			"""
		},{
			# mailto:this@guy
			name: "markup.underline.link.mailto.sy"
			match: """(?x) \\b
				mailto: (?:
					(?! \\#\\w*\\#)
					(?: [-:@\\w.,~%+_/?=&\\#;|!])
				)+
				(?<![-.,?:\\#;])
			"""
		}]
