name: "Regular Expression"
scopeName: "source.regexp"
fileTypes: ["regexp", "regex"]
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#anchor"}
			{include: "#escape"}
			{include: "#alternation"}
			{include: "#quantifier"}
			{include: "#assertion"}
			{include: "#group"}
			{include: "#class"}
		]

	alternation:
		name: "keyword.operator.logical.or.regexp"
		match: "\\|"

	anchor:
		patterns: [
			{match: "\\^",   name: "keyword.control.anchor.line-start.regexp"}
			{match: "\\$",   name: "keyword.control.anchor.line-end.regexp"}
			{match: "\\\\A", name: "keyword.control.anchor.string-start.regexp"}
			{match: "\\\\Z", name: "keyword.control.anchor.string-end-line.regexp"}
			{match: "\\\\z", name: "keyword.control.anchor.string-end.regexp"}
			{match: "\\\\G", name: "keyword.control.anchor.search-start.regexp"}
			{match: "\\\\b", name: "keyword.control.anchor.word-boundary.regexp"}
			{match: "\\\\B", name: "keyword.control.anchor.non-word-boundary.regexp"}
		]

	assertion:
		patterns: [{
			# Lookahead: Positive
			name: "meta.assertion.positive.look-ahead.regexp"
			begin: "\\(\\?="
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.definition.assertion.begin.regexp"
			endCaptures:   0: name: "punctuation.definition.assertion.end.regexp"
			patterns: [include: "$self"]
		},{
			# Lookahead: Negative
			name: "meta.assertion.negative.look-ahead.regexp"
			begin: "\\(\\?!"
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.definition.assertion.begin.regexp"
			endCaptures:   0: name: "punctuation.definition.assertion.end.regexp"
			patterns: [include: "$self"]
		},{
			# Lookbehind: Negative
			name: "meta.assertion.negative.look-behind.regexp"
			begin: "\\(\\?<!"
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.definition.assertion.begin.regexp"
			endCaptures:   0: name: "punctuation.definition.assertion.end.regexp"
			patterns: [include: "$self"]
		},{
			# Lookbeind: Positive
			name: "meta.assertion.positive.look-behind.regexp"
			begin: "\\(\\?<="
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.definition.assertion.begin.regexp"
			endCaptures:   0: name: "punctuation.definition.assertion.end.regexp"
			patterns: [include: "$self"]
		}]


	class:
		name: "meta.character-class.set.regexp"
		begin: "\\["
		end:   "\\]"
		beginCaptures: 0: name: "punctuation.definition.character-class.set.begin.regexp"
		endCaptures:   0: name: "punctuation.definition.character-class.set.end.regexp"
		patterns: [include: "#classInnards"]
	
	
	classInnards:
		patterns: [{
			
			# Negated expression
			name: "keyword.operator.logical.not.regexp"
			match: "\\G\\^"
		},{
			# Backspace character
			name: "constant.character.escape.backspace.regexp"
			match: "\\\\b"
		},{
			# Oniguruma: Intersection + Embedded subclass
			begin: "(&&)(\\[)"
			end:   "\\]"
			beginCaptures:
				1: name: "keyword.operator.logical.intersect.regexp"
				2: name: "punctuation.definition.character-class.set.begin.regexp"
			endCaptures:
				0: name: "punctuation.definition.character-class.set.end.regexp"
			patterns: [include: "#classInnards"]
		},{
			# Oniguruma: Intersection
			name: "keyword.operator.logical.intersect.regexp"
			match: "&&"
		},{
			# Character range
			name: "constant.other.character-class.range.regexp"
			match: "(?x)
				([^\\\\]|\\\\(?:x[0-9A-Fa-f]{2}|x\\{[0-9A-Fa-f]+\\}|\\d{3}|.)) (-)
				([^\\\\]|\\\\(?:x[0-9A-Fa-f]{2}|x\\{[0-9A-Fa-f]+\\}|\\d{3}|.))"
			captures:
				1: patterns: [include: "#escape"]
				2: name: "punctuation.separator.range.dash.regexp"
				3: patterns: [include: "#escape"]
		},{
			# Escaped [ or ]
			name: "constant.character.escape.backslash.regexp"
			match: "\\\\\\[|\\\\\\]"
		},{
			# Stop special characters being matched by other patterns
			match: "\\^|\\$|\\(|\\)|\\["
		},{
			# Load the normal pattern set
			include: "$self"
		},{
			# Anything else that didn't match, highlight as a constant
			name: "constant.single.character.character-class.regexp"
			match: "[^\\]]"
		}]


	# (?# Comment)
	comment:
		begin: "\\(\\?#"
		end:   "\\)"
		name: "comment.block.regexp"
		patterns: [
			match: "\\\\."
			name: "constant.character.escape.backslash.regexp"
		]


	# Metacharacters
	escape:
		patterns: [
			{match: "\\\\d",               name: "constant.character.escape.decimal.regexp"}
			{match: "\\\\s",               name: "constant.character.escape.whitespace.regexp"}
			{match: "\\\\w",               name: "constant.character.escape.word-char.regexp"}
			{match: "\\\\n",               name: "constant.character.escape.newline.regexp"}
			{match: "\\\\t",               name: "constant.character.escape.tab.regexp"}
			{match: "\\\\r",               name: "constant.character.escape.return.regexp"}
			{match: "\\\\D",               name: "constant.character.escape.non-decimal.regexp"}
			{match: "\\\\S",               name: "constant.character.escape.non-whitespace.regexp"}
			{match: "\\\\W",               name: "constant.character.escape.non-word-char.regexp"}
			{match: "\\\\a",               name: "constant.character.escape.alarm.regexp"}
			{match: "\\\\e",               name: "constant.character.escape.escape-char.regexp"}
			{match: "\\\\f",               name: "constant.character.escape.form-feed.regexp"}
			{match: "\\\\v",               name: "constant.character.escape.vertical-tab.regexp"}
			{match: "\\\\x[0-9A-Fa-f]{2}", name: "constant.character.escape.numeric.regexp"}
			{
				# \x{FFFFFF} - Variable-length codepoint
				name: "constant.character.escape.wide.numeric.regexp"
				match: "\\\\x(\\{)[0-9A-Fa-f]{2,}(\\})"
				captures:
					1: name: "punctuation.definition.unicode-escape.bracket.curly.begin.regexp"
					2: name: "punctuation.definition.unicode-escape.bracket.curly.end.regexp"
			},{
				# \o{000000} - Variable-length octal (Perl)
				name: "constant.character.escape.wide.octal.numeric.regexp"
				match: "\\\\o(\\{)\\d{2,}(\\})"
				captures:
					1: name: "punctuation.definition.unicode-escape.bracket.curly.begin.regexp"
					2: name: "punctuation.definition.unicode-escape.bracket.curly.end.regexp"
			},{
				# \p{Name} - Unicode character property
				name: "constant.character.escape.unicode-property.regexp"
				match: "\\\\[Pp](\\{)(\\^?)([^{}]+)(\\})"
				captures:
					1: name: "punctuation.definition.unicode-escape.bracket.curly.begin.regexp"
					2: name: "keyword.operator.logical.not.regexp"
					3: name: "entity.property.name.regexp"
					4: name: "punctuation.definition.unicode-escape.bracket.curly.end.regexp"
			},{
				# \pP - Single-character Unicode property
				name: "constant.character.escape.unicode-property.single-letter.regexp"
				match: "\\\\[Pp](\\w)"
				captures:
					1: name: "entity.property.name.regexp"
			},{
				# \k<NAME>, \g<NAME> - Group reference / Subexpression call
				name: "keyword.control.group-reference.regexp"
				contentName: "entity.group.name.regexp"
				begin: "\\\\[kg](<)"
				end:   ">"
				beginCaptures: 1: name: "punctuation.definition.group-reference.bracket.angle.begin.regexp"
				endCaptures:   0: name: "punctuation.definition.group-reference.bracket.angle.end.regexp"
				patterns: [include: "#groupRefInnards"]
			},{
				# \k'NAME', \g'NAME' - Group reference / Subexpression call
				name: "keyword.control.group-reference.regexp"
				contentName: "entity.group.name.regexp"
				begin: "\\\\[kg](')"
				end:   "'"
				beginCaptures: 1: name: "punctuation.definition.group-reference.quote.single.begin.regexp"
				endCaptures:   0: name: "punctuation.definition.group-reference.quote.single.end.regexp"
				patterns: [include: "#groupRefInnards"]
			},{
				# \g{NAME} - Match a named/numbered capture group (Perl)
				name: "keyword.control.group-reference.regexp"
				contentName: "entity.group.name.regexp"
				begin: "\\\\g({)"
				end:   "}"
				beginCaptures: 1: name: "punctuation.definition.group-reference.bracket.curly.begin.regexp"
				endCaptures:   0: name: "punctuation.definition.group-reference.bracket.curly.end.regexp"
			},{
				# \gN - Single-digit numbered capture group (Perl)
				name: "keyword.control.group-reference.regexp"
				match: "\\\\g\\d"
			},{
				# \N{NAME} - Named character/alias/sequence (Perl)
				name: "constant.character.escape.named-char.regexp"
				match: "\\\\N(\\{)([^{}]+)(\\})"
				captures:
					1: name: "punctuation.definition.unicode-escape.bracket.curly.begin.regexp"
					3: name: "punctuation.definition.unicode-escape.bracket.curly.end.regexp"
					2: name: "entity.character.name.regexp", patterns: [
						{name: "punctuation.separator.colon.regexp",     match: ":"}
						{name: "punctuation.separator.codepoint.regexp", match: "(?<=U)\\+(?=[A-Fa-f0-9])"}]
			}
			{match: "\\\\(?:\\d{3}|0\\d)", name: "constant.character.escape.octal.numeric.regexp"}
			{match: "\\\\0",               name: "constant.character.escape.null-byte.numeric.regexp"}
			{match: "\\\\(\\d{1,2})",      name: "keyword.other.back-reference.$1.regexp"}
			{match: "\\\\(?:c|C-)[?-_]",   name: "constant.character.escape.control-char.regexp"}
			{match: "\\\\h",               name: "constant.character.escape.hex-digit.regexp"}
			{match: "\\\\H",               name: "constant.character.escape.non-hex-digit.regexp"}
			{match: "\\\\E",               name: "keyword.control.end-mode.regexp"}
			{match: "\\\\Q",               name: "keyword.control.quote-mode.regexp"}
			{match: "\\\\F",               name: "keyword.control.foldcase-mode.regexp"}
			{match: "\\\\L",               name: "keyword.control.lowercase-mode.regexp"}
			{match: "\\\\U",               name: "keyword.control.titlecase-mode.regexp"}
			{match: "\\\\K",               name: "keyword.control.keep-out.regexp"}
			{match: "\\\\l",               name: "constant.character.escape.lowercase-next.regexp"}
			{match: "\\\\u",               name: "constant.character.escape.titlecase-next.regexp"}
			{match: "\\\\N",               name: "constant.character.escape.non-newline.regexp"}
			{match: "\\\\X",               name: "constant.character.escape.extended-grapheme.regexp"}
			{match: "\\\\R",               name: "constnat.character.escape.linebreak-grapheme.regexp"}
			{match: "\\\\V",               name: "constant.character.escape.non-vertical-whitespace.regexp"}
			{match: "\\\\M-\\\\C-[?-_]",   name: "constant.character.escape.meta-control.regexp"}
			{match: "\\\\M-.",             name: "constant.character.escape.meta-char.regexp"}
			{match: "\\\\.",               name: "constant.character.escape.misc.regexp"}
		]


	group:
		patterns: [{
			
			# Named group
			name: "meta.group.named.regexp"
			begin: "\\(\\?(?=[<'])"
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.definition.group.begin.regexp"
			endCaptures:   0: name: "punctuation.definition.group.end.regexp"
			patterns: [{
				
				# <ANGLEBRACKETS> - Group's name
				contentName: "entity.group.name.regexp"
				begin: "\\G<"
				end:   ">"
				beginCaptures: 0: name: "punctuation.definition.named-group.bracket.angle.begin.regexp"
				endCaptures:   0: name: "punctuation.definition.named-group.bracket.angle.end.regexp"
			},{
				# 'QUOTES' - Group's name
				contentName: "entity.group.name.regexp"
				begin: "\\G'"
				end:   "'"
				beginCaptures: 0: name: "punctuation.definition.named-group.quote.single.begin.regexp"
				endCaptures:   0: name: "punctuation.definition.named-group.quote.single.end.regexp"
				
			}, include: "$self"]
		},{
			# Non-capturing group
			name: "meta.group.non-capturing.regexp"
			patterns: [include: "$self"]
			begin: "(\\(\\?)([-a-z^]*)(:)"
			end:    "\\)"
			beginCaptures:
				1: name: "punctuation.definition.group.begin.regexp"
				2: patterns: [include: "#scopedModifiers"]
				3: name: "punctuation.separator.colon.regexp"
			endCaptures:
				0: name: "punctuation.definition.group.end.regexp"
		},{
			# Atomic group (no backtracking)
			name: "meta.group.atomic.regexp"
			begin: "\\(\\?>"
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.definition.group.begin.regexp"
			endCaptures:   0: name: "punctuation.definition.group.end.regexp"
			patterns: [include: "$self"]
		},{
			# Scoped modifiers
			name: "meta.group.scoped-modifiers.regexp"
			match: "(\\(\\?)([-a-z^]*)(\\))"
			captures:
				1: name: "punctuation.definition.group.begin.regexp"
				2: patterns: [include: "#scopedModifiers"]
				3: name: "punctuation.definition.group.end.regexp"
		},{
			# Regular group
			name: "meta.group.regexp"
			begin: "\\("
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.definition.group.begin.regexp"
			endCaptures:   0: name: "punctuation.definition.group.end.regexp"
			patterns: [include: "$self"]
		}]


	# Patterns inside a group reference's name (Mostly Oniguruma-specific)
	groupRefInnards:
		patterns: [
			{match: "\\-(?=\\d)", name: "keyword.operator.arithmetic.minus.regexp"}
			{match: "\\+(?=\\d)", name: "keyword.operator.arithmetic.plus.regexp"}
		]
		

	quantifier:
		name: "keyword.operator.quantifier.regexp"
		match: "[*+?]|\\{(?:\\d+,?\\d*|,\\d+)\\}"


	scopedModifiers:
		patterns: [
			{match: "(?<=\\?)\\^", name: "keyword.operator.modifier.reset.regexp"}
			{match: "-",           name: "keyword.operator.modifier.negate.regexp"}
			{match: "[a-z]",       name: "storage.modifier.flag.$0.regexp"}
		]
