name: "Regular Expression"
scopeName: "source.regexp"
fileTypes: ["regexp", "regex"]
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#oniguruma"}
			{include: "#escape"}
			{include: "#alternation"}
			{include: "#quantifier"}
			{include: "#assertion"}
			{include: "#group"}
			{include: "#class"}
			{include: "#anchor"}
		]

	alternation:
		name: "keyword.operator.logical.or.regexp"
		match: "\\|"

	anchor:
		patterns: [
			{match: "\\^",   name: "keyword.control.anchor.line-start.regexp"}
			{match: "\\$",   name: "keyword.control.anchor.line-end.regexp"}
			{match: "\\\\A", name: "keyword.control.anchor.string-start.regexp"}
			{match: "\\\\Z", name: "keyword.control.anchor.string-end-line.regexp"}
			{match: "\\\\z", name: "keyword.control.anchor.string-end.regexp"}
			{match: "\\\\G", name: "keyword.control.anchor.search-start.regexp"}
			{match: "\\\\b", name: "keyword.control.anchor.word-boundary.regexp"}
			{match: "\\\\B", name: "keyword.control.anchor.non-word-boundary.regex"}
		]

	assertion:
		patterns: [{
			# Lookahead: Positive
			name: "meta.assertion.positive.look-ahead.regexp"
			begin: "\\(\\?="
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.definition.assertion.begin.regexp"
			endCaptures:   0: name: "punctuation.definition.assertion.end.regexp"
			patterns: [include: "$self"]
		},{
			# Lookahead: Negative
			name: "meta.assertion.negative.look-ahead.regexp"
			begin: "\\(\\?!"
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.definition.assertion.begin.regexp"
			endCaptures:   0: name: "punctuation.definition.assertion.end.regexp"
			patterns: [include: "$self"]
		},{
			# Lookbehind: Negative
			name: "meta.assertion.negative.look-behind.regexp"
			begin: "\\(\\?<!"
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.definition.assertion.begin.regexp"
			endCaptures:   0: name: "punctuation.definition.assertion.end.regexp"
			patterns: [include: "$self"]
		},{
			# Lookbeind: Positive
			name: "meta.assertion.positive.look-behind.regexp"
			begin: "\\(\\?<="
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.definition.assertion.begin.regexp"
			endCaptures:   0: name: "punctuation.definition.assertion.end.regexp"
			patterns: [include: "$self"]
		}]


	class:
		name: "meta.character-class.set.regexp"
		begin: "\\["
		end:   "\\]"
		beginCaptures: 0: name: "punctuation.definition.character-class.set.begin.regexp"
		endCaptures:   0: name: "punctuation.definition.character-class.set.end.regexp"
		patterns: [include: "$self"]

	escape:
		name: "constant.character.escape.regexp"
		match: "\\\\."

	group:
		patterns: [{
			name: "meta.group.non-capturing.regexp"
			begin: "\\(\\?:"
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.definition.group.begin.regexp"
			endCaptures:   0: name: "punctuation.definition.group.end.regexp"
			patterns: [include: "$self"]
		},{
			name: "meta.group.atomic.regexp"
			begin: "\\(\\?>"
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.definition.group.begin.regexp"
			endCaptures:   0: name: "punctuation.definition.group.end.regexp"
			patterns: [include: "$self"]
		},{
			name: "meta.group.regexp"
			begin: "\\("
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.definition.group.begin.regexp"
			endCaptures:   0: name: "punctuation.definition.group.end.regexp"
			patterns: [include: "$self"]
		}]

	oniguruma:
		begin: "\\(\\?#"
		end:   "\\)"
		name: "comment.block.oniguruma"
		patterns: [
			match: "\\\\."
			name: "constant.escape.backslash.oniguruma"
		]


	quantifier:
		name: "keyword.operator.quantifier.regexp"
		match: "[*+?]|\\{(?:\\d+,?\\d*|,\\d+)\\}"
