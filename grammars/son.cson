name: "Standard Object Notation"
scopeName: "source.son"
fileTypes: ["son", "sy"]
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#regexp"}
			{include: "#string"}
			{include: "#field"}
		]
	
	# Comments
	comment:
		patterns: [{
			### Block comment ###
			name:  "comment.block.son"
			begin: "(?:^|(?<=\\s))(\#{3,})(?=\\s|$)"
			end:   "\\1"
			beginCaptures: 1: name: "punctuation.definition.comment.begin.son"
			endCaptures:   0: name: "punctuation.definition.comment.end.son"
		},{
			# Single-line comment
			name:  "comment.line.number-sign.son"
			begin: "(?:^|(?<=\\s))#(?=\\s|$)"
			end:   "$"
			beginCaptures:
				0: name: "punctuation.definition.comment.son"
		}]

	# Escaped character
	escape:
		patterns: [{
			# Newline hack
			name:  "constant.character.escape.newline.son"
			begin: "\\\\$\\s*"
			end:   "^"
			beginCaptures:
				0: name: "punctuation.backslash.definition.escape.son"
		},{
			# Hexadecimal escape: \x1B
			name: "constant.character.escape.unicode.son"
			match: "(\\\\)x[A-Fa-f0-9]{2}"
			captures:
				1: name: "punctuation.backslash.definition.escape.son"
		},{
			# Unicode escape: \u0032
			name:  "constant.character.escape.unicode.son"
			match: "(\\\\)u[A-Fa-f0-9]{4}"
			captures:
				1: name: "punctuation.backslash.definition.escape.son"
		},{
			# Unicode escape: \u{1B240}
			name: "constant.character.escape.unicode.son"
			match: "(\\\\)u({)[A-Fa-f0-9]+(})"
			captures:
				1: name: "punctuation.backslash.definition.escape.son"
				2: name: "punctuation.definition.unicode-escape.begin.bracket.curly.son"
				3: name: "punctuation.definition.unicode-escape.end.bracket.curly.son"
		},{
			# Invalid unicode escape: \u{nope}, \u{}
			name: "invalid.illegal.unicode-escape.son"
			match: "\\\\u{[^}\"]*}"
		},{
			# Invalid unicode escape: \uNOPE
			name: "invalid.illegal.unicode-escape.son"
			match: "\\\\u(?![A-Fa-f0-9]{4})[^\"]*"
		},{
			# Anything else
			name: "constant.character.escape.son"
			match: "(\\\\)."
			captures:
				0: name: "punctuation.backslash.definition.escape.son"
		}]

	# Named property
	field:
		begin: "([^\\s].*?)(:)(?=\\s|$)"
		end:   "^(?!\\G)"
		beginCaptures:
			1: name: "entity.name.tag.property.son"
			2: name: "punctuation.separator.key-value.son"
		patterns: [include: "#main"]

	# Regular expressions
	regexp:
		patterns: [{
			# Multiline regexp
			name:  "string.regexp.multiline.son"
			begin: "///"
			end:   "(///)([A-Za-z]*)"
			beginCaptures:
				0: name: "punctuation.definition.string.begin.son"
			endCaptures:
				1: name: "punctuation.definition.string.end.son"
				2: patterns: [include: "source.regexp#scopedModifiers"]
			patterns: [include: "source.regexp#main"]
		},{
			# Single-line regexp
			name: "string.regexp.son"
			match: "(/)(.*)(/)([A-Za-z]*)"
			captures:
				1: name: "punctuation.definition.string.begin.son"
				3: name: "punctuation.definition.string.end.son"
				2: patterns: [include: "source.regexp#main"]
				4: patterns: [include: "source.regexp#scopedModifiers"]
		}]

	# Quoted string literals
	string:
		patterns: [{
			# """ Double-quoted heredoc """
			name: "string.quoted.double.heredoc.son"
			begin: '"""'
			end:   '"""'
			beginCaptures: 0: name: "punctuation.definition.string.begin.son"
			endCaptures:   0: name: "punctuation.definition.string.end.son"
			patterns: [include: "#escape"]
		},{
			# ''' Single-quoted heredoc '''
			name: "string.quoted.single.heredoc.son"
			begin: "'''"
			end:   "'''"
			beginCaptures: 0: name: "punctuation.definition.string.begin.son"
			endCaptures:   0: name: "punctuation.definition.string.end.son"
			patterns: [include: "#escape"]
		},{
			# ``` Verbatim heredoc ```
			name: "string.quoted.verbatim.backtick.heredoc.son"
			begin: "```"
			end:   "```"
			beginCaptures: 0: name: "punctuation.definition.string.begin.son"
			endCaptures:   0: name: "punctuation.definition.string.end.son"
			patterns: [{
				# Only one escape possible: \```
				name: "constant.character.escape.heredoc.son"
				match: "(\\\\)```"
				captures:
					1: name: "punctuation.backslash.definition.escape.son"
			}]
		},{
			# "Double-quoted string"
			name:  "string.quoted.double.son"
			begin: '"'
			end:   '"'
			beginCaptures: 0: name: "punctuation.definition.string.begin.son"
			endCaptures:   0: name: "punctuation.definition.string.end.son"
			patterns: [include: "#escape"]
		},{
			# 'Single-quoted string'
			name: "string.quoted.single.son"
			begin: "'"
			end:   "'"
			beginCaptures: 0: name: "punctuation.definition.string.begin.son"
			endCaptures:   0: name: "punctuation.definition.string.end.son"
			patterns: [include: "#escape"]
		},{
			# `Verbatim string`
			name: "string.quoted.verbatim.backtick.son"
			begin: "`"
			end:   "`"
			beginCaptures: 0: name: "punctuation.definition.string.begin.son"
			endCaptures:   0: name: "punctuation.definition.string.end.son"
			patterns: [{
				# Only one escape possible: \`
				name: "constant.character.escape.backtick.son"
				match: "(\\\\)`"
				captures:
					1: name: "punctuation.backslash.definition.escape.son"
			}]
		}]
