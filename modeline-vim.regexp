(?x-im)

# Start of modeline (syntax documented in E520)
(?:
	# `vi:`, `vim:` or `Vim:`
	(?:^|[ \t]) (?:vi|Vi(?=m))
	
	# Check if specific Vim version(s) are requested (won't work in vi/ex)
	(?:
		# Versioned modeline. `vim<700:` targets Vim versions older than 7.0
		m
		[<=>]?    # If comparison operator is omitted, *only* this version is targeted
		[0-9]+    # Version argument ≡ (MINOR_VERSION_NUMBER × 100) + MINOR_VERSION_NUMBER
		|
		
		# Unversioned modeline. `vim:` targets any version of Vim.
		m
	)?
	|
	
	# `ex:`, which requires leading whitespace to avoid matching stuff like "lex:"
	[ \t] ex
)

# If the option-list begins with `set ` or `se `, it indicates an alternative
# modeline syntax partly-compatible with older versions of Vi. Here, the colon
# serves as a terminator for an option sequence, delimited by whitespace.
(?=
	# So we have to ensure the modeline ends with a colon
	: (?=[ \t]* set? [ \t] [^\r\n:]+ :) |

	# Otherwise, it isn't valid syntax and should be ignored
	: (?![ \t]* set? [ \t])
)

# Possible (unrelated) `option=value` pairs to skip past
(?:
	# Option separator, either
	(?:
		# 1. A colon (possibly surrounded by whitespace)
		[ \t]* : [ \t]*     # vim: noai :  ft=sh:noexpandtab
		|
		
		# 2. At least one (horizontal) whitespace character
		[ \t]               # vim: noai ft=sh noexpandtab
	)

	# Option's name. All recognised Vim options have an alphanumeric form.
	\w*

	# Possible value. Not every option takes an argument.
	(?:
		# Whitespace between name and value is allowed: `vim: ft   =sh`
		[ \t]*=

		# Option's value. Might be blank; `vim: ft= ` means "use no filetype".
		(?:
			[^\\\s]    # Beware of escaped characters: titlestring=\ ft=sh
			|          # will be read by Vim as { titlestring: " ft=sh" }.
			\\.
		)*
	)?
)*

# The actual filetype declaration
[ \t:] (?:filetype|ft|syntax) [ \t]*=

# Language's name
(\w+)

# Ensure it's followed by a legal separator (including EOL)
(?=$|\s|:)
